#!/usr/bin/python3

import extractor
import os
import pandas as pd
import numpy
import pickle
import pefile
import numpy as np
import joblib
import sys

usage_string = 	"usage : ./detect.py [-f|-c|-d] [path/to/file| path/to/directory]\n\n" + \
				"-f [--file] : option to test a file\n" + \
				"-c [--csv]  : option to test a csv with extracted data\n" + \
				"-d [--dir]  : option to test files in a directory"

clf = joblib.load('./models/Stack_model.pkl')
features = pickle.loads(open(os.path.join('./models/Stack_features.pkl'),'rb').read())
	
if len(sys.argv) < 3:
	print(usage_string)
	sys.exit()

if sys.argv[1] == '-c' or sys.argv[1] == '--csv':
	
	test = pd.read_csv('./Data/dataset_test.csv', sep=',')[features + ['Name']]
	
	Names = test['Name'].values
	X_testing = test.drop(['Name'], axis=1)
	#X = np.array(dataset.drop(['Name'],axis=1).values)
	#name = dataset['Name'].values

	X_testing_scaled = clf.named_steps['scale'].transform(X_testing)
	X_testing_scaled_new = pd.DataFrame(X_testing_scaled, columns=X_testing.columns)
	X_testing_pca = clf.named_steps['pca'].transform(X_testing_scaled_new)
	y_testing_pred = clf.named_steps['clf'].predict(X_testing_pca)

	res = y_testing_pred
	
	for i in range(len(Names)):
		print ('The file %70s is %s' % (Names[i],['legitimate','malicious'][int(res[i])]))

elif sys.argv[1] == '-f' or sys.argv[1] == '--file':
	data = pd.DataFrame.from_dict([extractor.extract_infos(sys.argv[2])])[features]
	data_scaled = clf.named_steps['scale'].transform(data)
	data_scaled_new = pd.DataFrame(data_scaled, columns=data.columns)
	data_pca = clf.named_steps['pca'].transform(data_scaled_new)
	pred = clf.named_steps['clf'].predict(data_pca)[0]
	print ('The file %70s is %s' % (sys.argv[2],['legitimate','malicious'][int(pred)]))

elif sys.argv[1] == '-d' or sys.argv[1] == '--dir':
	for ffile in os.listdir(sys.argv[2]):
		data = pd.DataFrame.from_dict([extractor.extract_infos(os.path.join(sys.argv[2] + '/', ffile))])[features]
		data_scaled = clf.named_steps['scale'].transform(data)
		data_scaled_new = pd.DataFrame(data_scaled, columns=data.columns)
		data_pca = clf.named_steps['pca'].transform(data_scaled_new)
		pred = clf.named_steps['clf'].predict(data_pca)[0]  
		print ('The file %70s is %s' % (os.path.basename(ffile),['legitimate','malicious'][int(pred)]))
else :
	print(usage_string)

