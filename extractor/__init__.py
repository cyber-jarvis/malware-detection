import pefile
import os
import array
import math
import pickle
import joblib
import sys
import argparse



def get_entropy(data):
    if len(data) == 0:
        return 0.0
    occurences = array.array('L', [0]*256)
    for x in data:
        occurences[x if isinstance(x, int) else ord(x)] += 1

    entropy = 0
    for x in occurences:
        if x:
            p_x = float(x) / len(data)
            entropy -= p_x*math.log(p_x, 2)

    return entropy


def get_resources(pe):
    """Extract resources :
    [entropy, size]"""
    resources = []
    if hasattr(pe, 'DIRECTORY_ENTRY_RESOURCE'):
        try:
            for resource_type in pe.DIRECTORY_ENTRY_RESOURCE.entries:
                if hasattr(resource_type, 'directory'):
                    for resource_id in resource_type.directory.entries:
                        if hasattr(resource_id, 'directory'):
                            for resource_lang in resource_id.directory.entries:
                                data = pe.get_data(resource_lang.data.struct.OffsetToData, resource_lang.data.struct.Size)
                                size = resource_lang.data.struct.Size
                                entropy = get_entropy(data)

                                resources.append([entropy, size])
        except Exception as e:
            return resources
    return resources

def get_version_info(pe):
    """Return version infos"""
    res = {}
    for fileinfo in pe.FileInfo:
        if fileinfo.Key == 'StringFileInfo':
            for st in fileinfo.StringTable:
                for entry in st.entries.items():
                    res[entry[0]] = entry[1]
        if fileinfo.Key == 'VarFileInfo':
            for var in fileinfo.Var:
                res[var.entry.items()[0][0]] = var.entry.items()[0][1]
    if hasattr(pe, 'VS_FIXEDFILEINFO'):
          res['flags'] = pe.VS_FIXEDFILEINFO.FileFlags
          res['os'] = pe.VS_FIXEDFILEINFO.FileOS
          res['type'] = pe.VS_FIXEDFILEINFO.FileType
          res['file_version'] = pe.VS_FIXEDFILEINFO.FileVersionLS
          res['product_version'] = pe.VS_FIXEDFILEINFO.ProductVersionLS
          res['signature'] = pe.VS_FIXEDFILEINFO.Signature
          res['struct_version'] = pe.VS_FIXEDFILEINFO.StrucVersion
    return res

#extract the info for a given file
def extract_infos(fpath):
    res = {}
    pe = pefile.PE(fpath)
    res['e_magic'] = pe.DOS_HEADER.e_magic 
    res['e_cblp'] = pe.DOS_HEADER.e_cblp 
    res['e_cp'] = pe.DOS_HEADER.e_cp 
    res['e_crlc'] = pe.DOS_HEADER.e_crlc 
    res['e_cparhdr'] = pe.DOS_HEADER.e_cparhdr
    res['e_minalloc'] = pe.DOS_HEADER.e_minalloc 
    res['e_maxalloc'] = pe.DOS_HEADER.e_maxalloc
    res['e_ss'] = pe.DOS_HEADER.e_ss
    res['e_sp'] = pe.DOS_HEADER.e_sp
    res['e_csum'] = pe.DOS_HEADER.e_csum
    res['e_ip'] = pe.DOS_HEADER.e_ip
    res['e_cs'] = pe.DOS_HEADER.e_cs
    res['e_lfarlc'] = pe.DOS_HEADER.e_lfarlc
    res['e_ovno'] = pe.DOS_HEADER.e_ovno
    res['e_oemid'] = pe.DOS_HEADER.e_oemid
    res['e_oeminfo'] = pe.DOS_HEADER.e_oeminfo
    res['e_lfanew'] = pe.DOS_HEADER.e_lfanew
    
    res['Machine'] = pe.FILE_HEADER.Machine
    res['SizeOfOptionalHeader'] = pe.FILE_HEADER.SizeOfOptionalHeader
    res['Characteristics'] = pe.FILE_HEADER.Characteristics
    res['NumberOfSections'] = pe.FILE_HEADER.NumberOfSections
    res['TimeDateStamp'] = pe.FILE_HEADER.TimeDateStamp
    res['PointerToSymbolTable'] = pe.FILE_HEADER.PointerToSymbolTable
    res['NumberOfSymbols'] = pe.FILE_HEADER.NumberOfSymbols
    
    res['Magic'] = pe.OPTIONAL_HEADER.Magic
    res['MajorLinkerVersion'] = pe.OPTIONAL_HEADER.MajorLinkerVersion
    res['MinorLinkerVersion'] = pe.OPTIONAL_HEADER.MinorLinkerVersion
    res['SizeOfCode'] = pe.OPTIONAL_HEADER.SizeOfCode
    res['SizeOfInitializedData'] = pe.OPTIONAL_HEADER.SizeOfInitializedData
    res['SizeOfUninitializedData'] = pe.OPTIONAL_HEADER.SizeOfUninitializedData
    res['AddressOfEntryPoint'] = pe.OPTIONAL_HEADER.AddressOfEntryPoint
    res['BaseOfCode'] = pe.OPTIONAL_HEADER.BaseOfCode
    try:
        res['BaseOfData'] = pe.OPTIONAL_HEADER.BaseOfData
    except AttributeError:
        res['BaseOfData'] = 0
        
    res['ImageBase'] = pe.OPTIONAL_HEADER.ImageBase
    res['SectionAlignment'] = pe.OPTIONAL_HEADER.SectionAlignment
    res['FileAlignment'] = pe.OPTIONAL_HEADER.FileAlignment
    res['MajorOperatingSystemVersion'] = pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
    res['MinorOperatingSystemVersion'] = pe.OPTIONAL_HEADER.MinorOperatingSystemVersion
    res['MajorImageVersion'] = pe.OPTIONAL_HEADER.MajorImageVersion
    res['MinorImageVersion'] = pe.OPTIONAL_HEADER.MinorImageVersion
    res['MajorSubsystemVersion'] = pe.OPTIONAL_HEADER.MajorSubsystemVersion
    res['MinorSubsystemVersion'] = pe.OPTIONAL_HEADER.MinorSubsystemVersion
    res['SizeOfImage'] = pe.OPTIONAL_HEADER.SizeOfImage
    res['SizeOfHeaders'] = pe.OPTIONAL_HEADER.SizeOfHeaders
    res['CheckSum'] = pe.OPTIONAL_HEADER.CheckSum
    res['Subsystem'] = pe.OPTIONAL_HEADER.Subsystem
    res['DllCharacteristics'] = pe.OPTIONAL_HEADER.DllCharacteristics
    res['SizeOfStackReserve'] = pe.OPTIONAL_HEADER.SizeOfStackReserve
    res['SizeOfStackCommit'] = pe.OPTIONAL_HEADER.SizeOfStackCommit
    res['SizeOfHeapReserve'] = pe.OPTIONAL_HEADER.SizeOfHeapReserve
    res['SizeOfHeapCommit'] = pe.OPTIONAL_HEADER.SizeOfHeapCommit
    res['LoaderFlags'] = pe.OPTIONAL_HEADER.LoaderFlags
    res['NumberOfRvaAndSizes'] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes
    
    
    try:
        res['SectionsLength'] = len(pe.sections)
    except (ValueError, TypeError):
        res['SectionsLength'] = 0
    # Sections
    res['SectionsNb'] = len(pe.sections)
    entropy = list(map(lambda x:x.get_entropy(), pe.sections))
    if len(entropy) == 0:
        res['SectionsMeanEntropy'] = 0
        res['SectionsMinEntropy'] = 0
        res['SectionsMaxEntropy'] = 0
    else:
        res['SectionsMeanEntropy'] = sum(entropy)/float(len(entropy))
        res['SectionsMinEntropy'] = min(entropy)
        res['SectionsMaxEntropy'] = max(entropy)
    raw_sizes = list(map(lambda x:x.SizeOfRawData, pe.sections))
    if len(raw_sizes) > 0:
        res['SectionsMeanRawsize'] = sum(raw_sizes)/float(len(raw_sizes))
        res['SectionsMinRawsize'] = min(raw_sizes)
        res['SectionsMaxRawsize'] = max(raw_sizes)
    else:
        res['SectionsMeanRawsize'] = 0
        res['SectionsMinRawsize'] = 0
        res['SectionsMaxRawsize'] = 0
    virtual_sizes = list(map(lambda x:x.Misc_VirtualSize, pe.sections))
    if len(virtual_sizes) > 0:
        res['SectionsMeanVirtualsize'] = sum(virtual_sizes)/float(len(virtual_sizes))
        res['SectionsMinVirtualsize'] = min(virtual_sizes)
        res['SectionMaxVirtualsize'] = max(virtual_sizes)
    else:
        res['SectionsMeanVirtualsize'] = 0
        res['SectionsMinVirtualsize'] = 0
        res['SectionMaxVirtualsize'] = 0
    #Imports
    try:
        res['ImportsNbDLL'] = len(pe.DIRECTORY_ENTRY_IMPORT)
        imports = sum([x.imports for x in pe.DIRECTORY_ENTRY_IMPORT], [])
        res['ImportsNb'] = len(imports)
        res['ImportsNbOrdinal'] = len(list(filter(lambda x:x.name is None, imports)))
    except AttributeError:
        res['ImportsNbDLL'] = 0
        res['ImportsNb'] = 0
        res['ImportsNbOrdinal'] = 0

    #Exports
    try:
        res['ExportNb'] = len(pe.DIRECTORY_ENTRY_EXPORT.symbols)
    except AttributeError:
        # No export
        res['ExportNb'] = 0
    #Resources
    resources= get_resources(pe)
    res['ResourcesNb'] = len(resources)
    if len(resources)> 0:
        entropy = list(map(lambda x:x[0], resources))
        res['ResourcesMeanEntropy'] = sum(entropy)/float(len(entropy))
        res['ResourcesMinEntropy'] = min(entropy)
        res['ResourcesMaxEntropy'] = max(entropy)
        sizes = list(map(lambda x:x[1], resources))
        res['ResourcesMeanSize'] = sum(sizes)/float(len(sizes))
        res['ResourcesMinSize'] = min(sizes)
        res['ResourcesMaxSize'] = max(sizes)
    else:
        res['ResourcesNb'] = 0
        res['ResourcesMeanEntropy'] = 0
        res['ResourcesMinEntropy'] = 0
        res['ResourcesMaxEntropy'] = 0
        res['ResourcesMeanSize'] = 0
        res['ResourcesMinSize'] = 0
        res['ResourcesMaxSize'] = 0

    # Load configuration size
    try:
        res['LoadConfigurationSize'] = pe.DIRECTORY_ENTRY_LOAD_CONFIG.struct.Size
    except AttributeError:
        res['LoadConfigurationSize'] = 0


    # Version configuration size
    try:
        version_infos = get_version_info(pe)
        res['VersionInformationSize'] = len(version_infos.keys())
    except AttributeError:
        res['VersionInformationSize'] = 0
    return res

def extract_folder(src, des, delim = ',', training_data=False, clean=False, mode='a'):
	columns = [	'Name',
				'e_magic',
				'e_cblp',
				'e_cp',
				'e_crlc',
				'e_cparhdr',
				'e_minalloc',
				'e_maxalloc',
				'e_ss',
				'e_sp',
				'e_csum',
				'e_ip',
				'e_cs',
				'e_lfarlc',
				'e_ovno',
				'e_oemid',
				'e_oeminfo',
				'e_lfanew',
				'Machine',
				'SizeOfOptionalHeader',
				'Characteristics',
				'NumberOfSections',
				'TimeDateStamp',
				'PointerToSymbolTable',
				'NumberOfSymbols',
				'Magic',
				'MajorLinkerVersion',
				'MinorLinkerVersion',
				'SizeOfCode',
				'SizeOfInitializedData',
				'SizeOfUninitializedData',
				'AddressOfEntryPoint',
				'BaseOfCode',
				'BaseOfData',
				'ImageBase',
				'SectionAlignment',
				'FileAlignment',
				'MajorOperatingSystemVersion',
				'MinorOperatingSystemVersion',
				'MajorImageVersion',
				'MinorImageVersion',
				'MajorSubsystemVersion',
				'MinorSubsystemVersion',
				'SizeOfImage',
				'SizeOfHeaders',
				'CheckSum',
				'Subsystem',
				'DllCharacteristics',
				'SizeOfStackReserve',
				'SizeOfStackCommit',
				'SizeOfHeapReserve',
				'SizeOfHeapCommit',
				'LoaderFlags',
				'NumberOfRvaAndSizes',
				'SectionsLength',
				'SectionsNb',
				'SectionsMeanEntropy',
				'SectionsMinEntropy',
				'SectionsMaxEntropy',
				'SectionsMeanRawsize',
				'SectionsMinRawsize',
				'SectionsMaxRawsize',
				'SectionsMeanVirtualsize',
				'SectionsMinVirtualsize',
				'SectionMaxVirtualsize',
				'ImportsNbDLL',
				'ImportsNb',
				'ImportsNbOrdinal',
				'ExportNb',
				'ResourcesNb',
				'ResourcesMeanEntropy',
				'ResourcesMinEntropy',
				'ResourcesMaxEntropy',
				'ResourcesMeanSize',
				'ResourcesMinSize',
				'ResourcesMaxSize',
				'LoadConfigurationSize',
				'VersionInformationSize' ]
	if training_data:
		columns.append('Malware')
	ff = open(des, mode)
	ff.write(delim.join(columns) + "\n")
	for ffile in os.listdir(src):
		data = extract_infos(os.path.join(src + '/', ffile))
		data['Name'] = ffile
		if training_data:
			data['Malware'] = int(not clean)
		pe_data = list(map(lambda x:data[x], columns))
		ff.write(delim.join(map(lambda x:str(x), pe_data)) + "\n")

if __name__ == '__main__':

    clf = joblib.load('classifier.pkl')
    features = pickle.loads(open(os.path.join('features.pkl'),'rb').read())
    
    for ffile in os.listdir('malware'):
        data = extract_infos(os.path.join('malware/', ffile))
        pe_features = list(map(lambda x:data[x], features))
        res= clf.predict([pe_features])[0]    
        print ('The file %s is %s %d' % (os.path.basename(ffile),['legitimate','malicious'][int(res)], res))
